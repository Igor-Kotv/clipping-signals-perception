{"version":3,"file":"static/js/63.1c1ca3df.chunk.js","mappings":"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","sources":["../node_modules/@thi.ng/errors/deferror.js","../node_modules/@thi.ng/errors/illegal-arguments.js","../node_modules/@thi.ng/errors/illegal-state.js","../node_modules/@thi.ng/bitstream/input.js","../node_modules/qoa-format/lib/common.js","../node_modules/qoa-format/decode.js","../node_modules/@thi.ng/bitstream/output.js","../node_modules/qoa-format/encode.js"],"sourcesContent":["const defError = (prefix, suffix = (msg) => msg !== void 0 ? \": \" + msg : \"\") => class extends Error {\n  origMessage;\n  constructor(msg) {\n    super(prefix(msg) + suffix(msg));\n    this.origMessage = msg !== void 0 ? String(msg) : \"\";\n  }\n};\nexport {\n  defError\n};\n","import { defError } from \"./deferror.js\";\nconst IllegalArgumentError = defError(() => \"illegal argument(s)\");\nconst illegalArgs = (msg) => {\n  throw new IllegalArgumentError(msg);\n};\nexport {\n  IllegalArgumentError,\n  illegalArgs\n};\n","import { defError } from \"./deferror.js\";\nconst IllegalStateError = defError(() => \"illegal state\");\nconst illegalState = (msg) => {\n  throw new IllegalStateError(msg);\n};\nexport {\n  IllegalStateError,\n  illegalState\n};\n","import { illegalArgs } from \"@thi.ng/errors/illegal-arguments\";\nimport { illegalState } from \"@thi.ng/errors/illegal-state\";\nconst U32 = 4294967296;\nclass BitInputStream {\n  buffer;\n  start;\n  limit;\n  pos;\n  bitPos;\n  bit;\n  constructor(buffer, offset = 0, limit = buffer.length << 3) {\n    this.buffer = buffer;\n    this.start = offset;\n    this.limit = limit;\n    this.seek(offset);\n  }\n  *[Symbol.iterator]() {\n    let j = this.start;\n    let i = j >>> 3;\n    let b = 7 - (j & 7);\n    while (j < this.limit) {\n      yield this.buffer[i] >>> b & 1;\n      if (--b < 0) {\n        i++;\n        b = 7;\n      }\n      j++;\n    }\n  }\n  get length() {\n    return this.limit;\n  }\n  get position() {\n    return this.bitPos;\n  }\n  seek(pos) {\n    if (pos < this.start || pos >= this.limit) {\n      illegalArgs(`seek pos out of bounds: ${pos}`);\n    }\n    this.pos = pos >>> 3;\n    this.bit = 8 - (pos & 7);\n    this.bitPos = pos;\n    return this;\n  }\n  read(wordSize = 1, safe = true) {\n    if (wordSize > 32) {\n      return this.read(wordSize - 32, safe) * U32 + this.read(32, safe);\n    } else if (wordSize > 8) {\n      let out = 0;\n      let n = wordSize & -8;\n      let msb = wordSize - n;\n      if (msb > 0) {\n        out = this._read(msb, safe);\n      }\n      while (n > 0) {\n        out = (out << 8 | this._read(8, safe)) >>> 0;\n        n -= 8;\n      }\n      return out;\n    } else {\n      return this._read(wordSize, safe);\n    }\n  }\n  readFields(fields, safe = true) {\n    return fields.map((word) => this.read(word, safe));\n  }\n  readWords(n, wordSize = 8, safe = true) {\n    let out = [];\n    while (n-- > 0) {\n      out.push(this.read(wordSize, safe));\n    }\n    return out;\n  }\n  readStruct(fields, safe = true) {\n    return fields.reduce((acc, [id, word]) => {\n      return acc[id] = this.read(word, safe), acc;\n    }, {});\n  }\n  readBit(safe = true) {\n    safe && this.checkLimit(1);\n    this.bit--;\n    this.bitPos++;\n    let out = this.buffer[this.pos] >>> this.bit & 1;\n    if (this.bit === 0) {\n      this.pos++;\n      this.bit = 8;\n    }\n    return out;\n  }\n  _read(wordSize, safe = true) {\n    safe && this.checkLimit(wordSize);\n    let l = this.bit - wordSize, out;\n    if (l >= 0) {\n      this.bit = l;\n      out = this.buffer[this.pos] >>> l & (1 << wordSize) - 1;\n      if (l === 0) {\n        this.pos++;\n        this.bit = 8;\n      }\n    } else {\n      out = (this.buffer[this.pos++] & (1 << this.bit) - 1) << -l;\n      this.bit = 8 + l;\n      out = out | this.buffer[this.pos] >>> this.bit;\n    }\n    this.bitPos += wordSize;\n    return out;\n  }\n  checkLimit(requested) {\n    if (this.bitPos + requested > this.limit) {\n      illegalState(`can't read past EOF`);\n    }\n  }\n}\nexport {\n  BitInputStream\n};\n","export const QOA_MIN_FILESIZE = 16;\nexport const QOA_MAX_CHANNELS = 8;\n\nexport const QOA_SLICE_LEN = 20;\nexport const QOA_SLICES_PER_FRAME = 256;\nexport const QOA_FRAME_LEN = QOA_SLICES_PER_FRAME * QOA_SLICE_LEN;\nexport const QOA_LMS_LEN = 4;\nexport const QOA_MAGIC = 0x716f6166; /* 'qoaf' */\nexport const QOA_FRAME_SIZE = (channels, slices) =>\n  Math.floor(8 + QOA_LMS_LEN * 4 * channels + 8 * slices * channels);\n\nexport function qoa_clamp(v, min, max) {\n  return v < min ? min : v > max ? max : v;\n}\n\nexport function LMS(h, w) {\n  const history = new Int16Array(h || 4);\n  const weights = new Int16Array(w || 4);\n  return { history, weights };\n}\n\nexport function qoa_lms_predict(weights, history) {\n  return (\n    (weights[0] * history[0] +\n      weights[1] * history[1] +\n      weights[2] * history[2] +\n      weights[3] * history[3]) >>\n    13\n  );\n}\n\nexport function qoa_lms_update(weights, history, sample, residual) {\n  let delta = residual >> 4;\n  weights[0] += history[0] < 0 ? -delta : delta;\n  weights[1] += history[1] < 0 ? -delta : delta;\n  weights[2] += history[2] < 0 ? -delta : delta;\n  weights[3] += history[3] < 0 ? -delta : delta;\n  history[0] = history[1];\n  history[1] = history[2];\n  history[2] = history[3];\n  history[3] = sample;\n}\n\nexport const qoa_round = (num) => Math.sign(num) * Math.round(Math.abs(num));\n\n/* We have 16 different scalefactors. Like the quantized residuals these become\nless accurate at the higher end. In theory, the highest scalefactor that we\nwould need to encode the highest 16bit residual is (2**16)/8 = 8192. However we\nrely on the LMS filter to predict samples accurately enough that a maximum \nresidual of one quarter of the 16 bit range is high sufficent. I.e. with the \nscalefactor 2048 times the quant range of 8 we can encode residuals up to 2**14.\n\nThe scalefactor values are computed as:\nscalefactor_tab[s] <- round(pow(s + 1, 2.75)) */\n\nexport const qoa_scalefactor_tab = Array(16)\n  .fill()\n  .map((_, s) => qoa_round(Math.pow(s + 1, 2.75)));\n\n/* The dequant_tab maps each of the scalefactors and quantized residuals to \ntheir unscaled & dequantized version.\n\nSince qoa_div rounds away from the zero, the smallest entries are mapped to 3/4\ninstead of 1. The dequant_tab assumes the following dequantized values for each \nof the quant_tab indices and is computed as:\nfloat dqt[8] = {0.75, -0.75, 2.5, -2.5, 4.5, -4.5, 7, -7};\ndequant_tab[s][q] <- round(scalefactor_tab[s] * dqt[q]) */\n\nconst dqt = [0.75, -0.75, 2.5, -2.5, 4.5, -4.5, 7, -7];\nexport const qoa_dequant_tab = qoa_scalefactor_tab.map((sf) => {\n  return dqt.map((dq) => qoa_round(dq * sf));\n});\n","import { BitInputStream } from \"@thi.ng/bitstream\";\nimport {\n  qoa_lms_predict,\n  qoa_lms_update,\n  qoa_clamp,\n  qoa_dequant_tab,\n  LMS,\n  QOA_MIN_FILESIZE,\n  QOA_SLICE_LEN,\n  QOA_MAGIC,\n  QOA_LMS_LEN,\n} from \"./lib/common.js\";\n\nfunction decodeHeader(stream) {\n  const magic = stream.read(32);\n  if (magic !== QOA_MAGIC) {\n    throw new Error(`Not a QOA file; expected magic number 'qoaf'`);\n  }\n\n  // peek first frame to get audio file data\n  const header = {\n    samples: stream.read(32),\n    channels: stream.read(8),\n    sampleRate: stream.read(24),\n  };\n\n  // go back to end of header\n  stream.seek(64);\n\n  // return data\n  return header;\n}\n\nfunction qoa_decode_frame(stream, audio, lmses, channelData, sampleOffset) {\n  const channels = stream.read(8);\n  const sampleRate = stream.read(24);\n  const samples = stream.read(16); // frame samples\n  const frameSize = stream.read(16);\n\n  const dataSize = Math.floor(frameSize - 8 - QOA_LMS_LEN * 4 * channels);\n  const numSlices = Math.floor(dataSize / 8);\n  const maxTotalSamples = numSlices * QOA_SLICE_LEN;\n\n  if (\n    channels != audio.channels ||\n    sampleRate != audio.sampleRate ||\n    samples * channels > maxTotalSamples\n  ) {\n    throw new Error(`invalid frame header data`);\n  }\n\n  // decode LMS history and weights\n  for (let c = 0; c < channels; c++) {\n    const lms = lmses[c];\n    for (let i = 0; i < QOA_LMS_LEN; i++) {\n      let h = stream.read(16);\n      lms.history[i] = h;\n    }\n    for (let i = 0; i < QOA_LMS_LEN; i++) {\n      let w = stream.read(16);\n      lms.weights[i] = w;\n    }\n  }\n\n  for (\n    let sample_index = 0;\n    sample_index < samples;\n    sample_index += QOA_SLICE_LEN\n  ) {\n    for (let c = 0; c < channels; c++) {\n      const scalefactor = stream.read(4);\n      const table = qoa_dequant_tab[scalefactor];\n      const slice_start = sample_index;\n      const slice_end = Math.min(sample_index + QOA_SLICE_LEN, samples);\n      const slice_count = slice_end - slice_start;\n      const lms = lmses[c];\n      const sampleData = channelData[c];\n      let idx = sampleOffset + slice_start;\n      const weights = lms.weights;\n      const history = lms.history;\n      let bitsRemaining = 60;\n      // note: this loop is a hot code path and could be optimized\n      for (let i = 0; i < slice_count; i++) {\n        const predicted = qoa_lms_predict(weights, history);\n        const quantized = stream.read(3);\n        const dequantized = table[quantized];\n        const reconstructed = qoa_clamp(predicted + dequantized, -32768, 32767);\n        const sample =\n          reconstructed < 0 ? reconstructed / 32768 : reconstructed / 32767;\n        sampleData[idx++] = sample;\n        qoa_lms_update(weights, history, reconstructed, dequantized);\n        bitsRemaining -= 3;\n      }\n      // skip stream if needed\n      if (bitsRemaining > 0) {\n        stream.read(bitsRemaining);\n      }\n    }\n  }\n\n  return samples;\n}\n\nexport default function decode(data) {\n  if (data.byteLength < QOA_MIN_FILESIZE) {\n    throw new Error(`QOA file size must be >= ${QOA_MIN_FILESIZE}`);\n  }\n\n  const stream = new BitInputStream(data);\n  const audio = decodeHeader(stream);\n\n  const channelData = [];\n  const lmses = [];\n  for (let c = 0; c < audio.channels; c++) {\n    const d = new Float32Array(audio.samples);\n    channelData.push(d);\n    lmses.push(LMS());\n  }\n\n  let sampleIndex = 0;\n  let frameLen = 0;\n  do {\n    frameLen = qoa_decode_frame(stream, audio, lmses, channelData, sampleIndex);\n    sampleIndex += frameLen;\n  } while (frameLen && sampleIndex < audio.samples);\n\n  return {\n    ...audio,\n    channelData,\n  };\n}\n","import { illegalArgs } from \"@thi.ng/errors/illegal-arguments\";\nimport { BitInputStream } from \"./input.js\";\nconst DEFAULT_BUF_SIZE = 16;\nconst U32 = 4294967296;\nclass BitOutputStream {\n  buffer;\n  start;\n  pos;\n  bit;\n  bitPos;\n  constructor(buffer, offset = 0) {\n    this.buffer = typeof buffer === \"undefined\" ? new Uint8Array(DEFAULT_BUF_SIZE) : typeof buffer === \"number\" ? new Uint8Array(buffer) : buffer;\n    this.start = offset;\n    this.seek(offset);\n    this.buffer[this.pos] &= ~((1 << this.bit) - 1);\n  }\n  get position() {\n    return this.bitPos;\n  }\n  seek(pos) {\n    if (pos < this.start || pos >= this.buffer.length << 3) {\n      illegalArgs(`seek pos out of bounds: ${pos}`);\n    }\n    this.pos = pos >>> 3;\n    this.bit = 8 - (pos & 7);\n    this.bitPos = pos;\n    return this;\n  }\n  bytes() {\n    return this.buffer.slice(0, this.pos + (this.bit & 7 ? 1 : 0));\n  }\n  reader(from = 0) {\n    return new BitInputStream(this.buffer, from, this.position);\n  }\n  write(x, wordSize = 1) {\n    if (wordSize > 32) {\n      let hi = Math.floor(x / U32);\n      this.write(hi, wordSize - 32);\n      this.write(x - hi * U32, 32);\n    } else if (wordSize > 8) {\n      let n = wordSize & -8;\n      let msb = wordSize - n;\n      if (msb > 0) {\n        this._write(x >>> n, msb);\n      }\n      n -= 8;\n      while (n >= 0) {\n        this._write(x >>> n, 8);\n        n -= 8;\n      }\n    } else {\n      this._write(x, wordSize);\n    }\n    return this;\n  }\n  writeWords(input, wordSize = 8) {\n    let iter = input[Symbol.iterator]();\n    let v;\n    while (v = iter.next(), !v.done) {\n      this.write(v.value, wordSize);\n    }\n  }\n  writeBit(x) {\n    this.bit--;\n    this.buffer[this.pos] = this.buffer[this.pos] & ~(1 << this.bit) | x << this.bit;\n    if (this.bit === 0) {\n      this.ensureSize();\n      this.bit = 8;\n    }\n    this.bitPos++;\n    return this;\n  }\n  _write(x, wordSize) {\n    x &= (1 << wordSize) - 1;\n    let buf = this.buffer;\n    let pos = this.pos;\n    let bit = this.bit;\n    let b = bit - wordSize;\n    let m = bit < 8 ? ~((1 << bit) - 1) : 0;\n    if (b >= 0) {\n      m |= (1 << b) - 1;\n      buf[pos] = buf[pos] & m | x << b & ~m;\n      if (b === 0) {\n        this.ensureSize();\n        this.bit = 8;\n      } else {\n        this.bit = b;\n      }\n    } else {\n      this.bit = bit = 8 + b;\n      buf[pos] = buf[pos] & m | x >>> -b & ~m;\n      this.ensureSize();\n      this.buffer[this.pos] = this.buffer[this.pos] & (1 << bit) - 1 | x << bit & 255;\n    }\n    this.bitPos += wordSize;\n    return this;\n  }\n  ensureSize() {\n    if (++this.pos === this.buffer.length) {\n      let b = new Uint8Array(this.buffer.length << 1);\n      b.set(this.buffer);\n      this.buffer = b;\n    }\n  }\n}\nexport {\n  BitOutputStream\n};\n","import { BitOutputStream } from \"@thi.ng/bitstream\";\nimport {\n  qoa_lms_predict,\n  qoa_lms_update,\n  qoa_clamp,\n  qoa_dequant_tab,\n  qoa_scalefactor_tab,\n  LMS,\n  QOA_SLICE_LEN,\n  QOA_FRAME_LEN,\n  QOA_MAGIC,\n  QOA_LMS_LEN,\n  QOA_FRAME_SIZE,\n} from \"./lib/common.js\";\n\n/* The reciprocal_tab maps each of the 16 scalefactors to their rounded \nreciprocals 1/scalefactor. This allows us to calculate the scaled residuals in \nthe encoder with just one multiplication instead of an expensive division. We \ndo this in .16 fixed point with integers, instead of floats.\n\nThe reciprocal_tab is computed as:\nreciprocal_tab[s] <- ((1<<16) + scalefactor_tab[s] - 1) / scalefactor_tab[s] */\n\nconst qoa_reciprocal_tab = qoa_scalefactor_tab.map((s) =>\n  Math.floor(((1 << 16) + s - 1) / s)\n);\n\n/* The quant_tab provides an index into the dequant_tab for residuals in the\nrange of -8 .. 8. It maps this range to just 3bits and becommes less accurate at \nthe higher end. Note that the residual zero is identical to the lowest positive \nvalue. This is mostly fine, since the qoa_div() function always rounds away \nfrom zero. */\n\nconst qoa_quant_tab = [\n  // -8..-1\n  7, 7, 7, 5, 5, 3, 3, 1,\n  // 0\n  0,\n  //  1.. 8\n  0, 2, 2, 4, 4, 6, 6, 6,\n];\n\n/* qoa_div() implements a rounding division, but avoids rounding to zero for \nsmall numbers. E.g. 0.1 will be rounded to 1. Note that 0 itself still \nreturns as 0, which is handled in the qoa_quant_tab[].\nqoa_div() takes an index into the .16 fixed point qoa_reciprocal_tab as an\nargument, so it can do the division with a cheaper integer multiplication. */\n\nfunction qoa_div(v, scalefactor) {\n  const reciprocal = qoa_reciprocal_tab[scalefactor];\n  let n = (v * reciprocal + (1 << 15)) >> 16;\n  n = n + ((v > 0) - (v < 0)) - ((n > 0) - (n < 0)); /* round away from 0 */\n  return n;\n}\n\nfunction qoa_encode_frame(stream, audio, lmses, sample_offset, frame_len) {\n  const channels = audio.channels;\n  const sampleRate = audio.sampleRate;\n  const channelData = audio.channelData;\n  const samples = audio.samples;\n\n  const slices = Math.floor((frame_len + QOA_SLICE_LEN - 1) / QOA_SLICE_LEN);\n  const frame_size = QOA_FRAME_SIZE(channels, slices);\n\n  // Frame header\n  stream.write(channels, 8);\n  stream.write(sampleRate, 24);\n  stream.write(frame_len, 16); // frame samples\n  stream.write(frame_size, 16);\n\n  // write current LMS weights and history state\n  for (let c = 0; c < channels; c++) {\n    const lms = lmses[c];\n\n    /* If the weights have grown too large, reset them to 0. This may happen\n\t\twith certain high-frequency sounds. This is a last resort and will \n\t\tintroduce quite a bit of noise, but should at least prevent pops/clicks */\n    const weights_sum =\n      lms.weights[0] * lms.weights[0] +\n      lms.weights[1] * lms.weights[1] +\n      lms.weights[2] * lms.weights[2] +\n      lms.weights[3] * lms.weights[3];\n    if (weights_sum > 0x2fffffff) {\n      lms.weights[0] = 0;\n      lms.weights[1] = 0;\n      lms.weights[2] = 0;\n      lms.weights[3] = 0;\n    }\n\n    for (let i = 0; i < QOA_LMS_LEN; i++) {\n      stream.write(lms.history[i], 16);\n    }\n    for (let i = 0; i < QOA_LMS_LEN; i++) {\n      stream.write(lms.weights[i], 16);\n    }\n  }\n\n  /* We encode all samples with the channels interleaved on a slice level.\n\tE.g. for stereo: (ch-0, slice 0), (ch 1, slice 0), (ch 0, slice 1), ...*/\n  for (\n    let sample_index = 0;\n    sample_index < frame_len;\n    sample_index += QOA_SLICE_LEN\n  ) {\n    for (let c = 0; c < channels; c++) {\n      const slice_len = qoa_clamp(QOA_SLICE_LEN, 0, frame_len - sample_index);\n      const slice_start = sample_index;\n\n      /* Brute for search for the best scalefactor. Just go through all\n\t\t\t16 scalefactors, encode all samples for the current slice and \n\t\t\tmeassure the total squared error. */\n      let best_error = Number.MAX_SAFE_INTEGER;\n      let best_slice;\n      let best_slice_scalefactor;\n      let best_lms;\n      const sampleData = channelData[c];\n\n      for (let scalefactor = 0; scalefactor < 16; scalefactor++) {\n        /* We have to reset the LMS state to the last known good one\n\t\t\t\tbefore trying each scalefactor, as each pass updates the LMS\n\t\t\t\tstate when encoding. */\n        let lms = LMS(lmses[c].history, lmses[c].weights);\n\n        const table = qoa_dequant_tab[scalefactor];\n\n        // an array of slice data\n        let slice = [];\n        let current_error = 0;\n        let idx = slice_start + sample_offset;\n\n        for (let i = 0; i < slice_len; i++) {\n          let sample = sampleData[idx++];\n\n          // turn into 16 bit signed integer\n          sample = Math.floor(\n            Math.fround(sample < 0 ? sample * 32768 : sample * 32767)\n          );\n          sample = qoa_clamp(sample, -32768, 32767);\n\n          let predicted = qoa_lms_predict(lms.weights, lms.history);\n          let residual = sample - predicted;\n          let scaled = qoa_div(residual, scalefactor);\n          let clamped = qoa_clamp(scaled, -8, 8);\n          let quantized = qoa_quant_tab[clamped + 8];\n          let dequantized = table[quantized];\n          let reconstructed = qoa_clamp(predicted + dequantized, -32768, 32767);\n          let error = sample - reconstructed;\n          current_error += error * error;\n          if (current_error > best_error) {\n            break;\n          }\n\n          qoa_lms_update(lms.weights, lms.history, reconstructed, dequantized);\n          slice.push(quantized);\n        }\n\n        if (current_error < best_error) {\n          best_error = current_error;\n          best_slice = slice;\n          best_slice_scalefactor = scalefactor;\n          best_lms = lms;\n        }\n      }\n\n      lmses[c] = best_lms;\n      // first, write the 4bit scalefactor\n      stream.write(best_slice_scalefactor, 4);\n      // now write each 3bit datum in the slice\n      for (let i = 0; i < QOA_SLICE_LEN; i++) {\n        // the last frame of a file might be smaller than QOA_SLICE_LEN\n        const v = i < best_slice.length ? best_slice[i] : 0;\n        stream.write(v, 3);\n      }\n    }\n  }\n}\n\nexport default function encode({ channelData, sampleRate = 44100 } = {}) {\n  const channels = channelData.length;\n  const samples = channels >= 1 ? channelData[0].length : 0;\n  const audio = {\n    samples,\n    channels,\n    channelData,\n    sampleRate,\n  };\n\n  const num_frames = (samples + QOA_FRAME_LEN - 1) / QOA_FRAME_LEN;\n  const num_slices = (samples + QOA_SLICE_LEN - 1) / QOA_SLICE_LEN;\n  const encoded_size =\n    8 /* 8 byte file header */ +\n    num_frames * 8 /* 8 byte frame headers */ +\n    num_frames *\n      QOA_LMS_LEN *\n      4 *\n      audio.channels /* 4 * 4 bytes lms state per channel */ +\n    num_slices * 8 * audio.channels; /* 8 byte slices */\n\n  const lmses = [];\n  for (let c = 0; c < audio.channels; c++) {\n    const lms = LMS();\n    lms.weights[0] = 0;\n    lms.weights[1] = 0;\n    lms.weights[2] = -(1 << 13);\n    lms.weights[3] = 1 << 14;\n    lmses.push(lms);\n  }\n\n  // write header\n  const stream = new BitOutputStream(encoded_size);\n  stream.write(QOA_MAGIC, 32);\n  stream.write(samples, 32);\n\n  let frame_len = QOA_FRAME_LEN;\n  for (\n    let sample_index = 0;\n    sample_index < samples;\n    sample_index += frame_len\n  ) {\n    frame_len = qoa_clamp(QOA_FRAME_LEN, 0, samples - sample_index);\n    qoa_encode_frame(stream, audio, lmses, sample_index, frame_len);\n  }\n\n  return stream.bytes();\n}\n"],"names":["defError","prefix","suffix","arguments","length","undefined","msg","Error","origMessage","constructor","super","this","String","IllegalArgumentError","illegalArgs","IllegalStateError","BitInputStream","buffer","start","limit","pos","bitPos","bit","offset","seek","Symbol","iterator","j","i","b","position","read","wordSize","safe","out","n","msb","_read","readFields","fields","map","word","readWords","push","readStruct","reduce","acc","_ref","id","readBit","checkLimit","l","requested","illegalState","QOA_MIN_FILESIZE","QOA_SLICE_LEN","QOA_FRAME_LEN","QOA_LMS_LEN","QOA_MAGIC","QOA_FRAME_SIZE","channels","slices","Math","floor","qoa_clamp","v","min","max","LMS","h","w","history","Int16Array","weights","qoa_lms_predict","qoa_lms_update","sample","residual","delta","qoa_round","num","sign","round","abs","qoa_scalefactor_tab","Array","fill","_","s","pow","dqt","qoa_dequant_tab","sf","dq","qoa_decode_frame","stream","audio","lmses","channelData","sampleOffset","sampleRate","samples","frameSize","dataSize","maxTotalSamples","c","lms","sample_index","scalefactor","table","slice_start","slice_count","sampleData","idx","bitsRemaining","predicted","dequantized","reconstructed","decode","data","byteLength","header","decodeHeader","d","Float32Array","sampleIndex","frameLen","U32","BitOutputStream","Uint8Array","bytes","slice","reader","from","write","x","hi","_write","writeWords","input","iter","next","done","value","writeBit","ensureSize","buf","m","set","qoa_reciprocal_tab","qoa_quant_tab","qoa_div","qoa_encode_frame","sample_offset","frame_len","frame_size","slice_len","best_slice","best_slice_scalefactor","best_lms","best_error","Number","MAX_SAFE_INTEGER","current_error","fround","clamped","quantized","error","encode","num_frames","encoded_size"],"sourceRoot":""}